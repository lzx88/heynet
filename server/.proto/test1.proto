

  
 {
    P = {
      1 = {
        request = 1
        response = 2
        tag = 20
      }
      2 = {
        request = 3
        response = 4
        tag = 1
      }
    }
    T = {
      1 = {
        field = {
          1 = {
            type = -2
            name = "name"
            tag = 1
          }
          2 = {
            type = 4
            name = "nnn"
            tag = 2
          }
        }
        name = "test.p0"
        tag = 1
      }
      2 = {
        field = {
          1 = {
            type = 5
            name = "index"
            tag = 1
          }
        }
        name = "p0.response"
        tag = 2
      }
      3 = {
        field = {}
        name = "test.p1"
        tag = 3
      }
      4 = {
        field = {
          1 = {
            type = -1
            name = "name"
            tag = 1
          }
          2 = {
            type = -1
            key = -1
            name = "type"
            tag = 3
          }
        }
        name = "type.field"
        tag = 4
      }
      5 = {
        field = {
          1 = {
            type = 4
            key = 1
            name = "fields"
            tag = 2
          }
        }
        name = "type"
        tag = 5
      }
    }
  }


    /********************************************************************
      created:  2014/12/16
      filename: luahelper.h
      version:  1.0
      purpose:  一些辅助宏 by z
    *********************************************************************/
    #ifndef luahelper_h__
    #define luahelper_h__
     
    #include "LUAEngine.h"
     
    class ZLuaHelper
    {
    private:
      lua_State* L;
      int i;
    public:
      bool check(){return i-- > 0;}
      ZLuaHelper(lua_State* ls)
        :L(ls),i(1){}
      ~ZLuaHelper() {lua_pop(L, 1);}
    };
     
    template<typename T>
    inline void luaGetData(lua_State* L, int idx, T& val) { val = (T)lua_tointeger(L, idx);}
    template<>
    inline void luaGetData<string>(lua_State* L, int idx, string& val){ val = lua_tostring(L, idx);}
    template<>
    inline void luaGetData<const char*>(lua_State* L, int idx, const char*& val){ val = lua_tostring(L, idx);}
    inline void luaGetField(lua_State* L, int idx, int k) { lua_rawgeti(L, idx, k);}
    inline void luaGetField(lua_State* L, int idx, const char* k) { lua_getfield(L, idx, k);}
     
    #define IF_GetLuaTaByIdx(L, k, idx) luaGetField(L, idx, k); for(ZLuaHelper hel(L); hel.check() && !lua_isnil(L, -1) && lua_istable(L, -1);)
    #define IF_GetLuaTab(L, k) IF_GetLuaTaByIdx(L, k, -1)
    #define For_LuaTab(L)  for(lua_pushnil(L); 0 != lua_next(L, -2); lua_pop(L, 1))
    #define GetLuaTabMember(L, k, val) luaGetField(L, -1, k); luaGetData(L, -1, val); lua_pop(L, 1)
     
    #endif//luahelper_h__